{"version":3,"sources":["pages/About.tsx","constants.ts","methods.ts","components/Sidebar.tsx","components/NavigationBar.tsx","components/StatisticsChart.tsx","requests/requestCountriesList.ts","components/SelectCountryList.tsx","requests/handleSearchByCountry.ts","pages/Country.tsx","requests/handleGlobalSearch.ts","pages/Global.tsx","App.tsx","index.tsx"],"names":["About","Container","className","Typography","href","MIN_DATE","API_URL","CONFIRMED","DEATHS","RECOVERED","ACTIVE","LOADING","NO_DATA_FOUND","ERROR","CHOOSE_SEARCH_PARAMETERS","getCurrentDate","Date","toISOString","split","sortByDate","a","b","date","sortByCountryName","Country","Sidebar","searchByCountries","chooseCountry","chooseCasesType","chooseDateFrom","chooseDateTo","chooseNewCasesOnly","chosenCases","chosenNewCasesOnly","onSearchButtonClick","chosenDateFrom","chosenDateTo","variant","ButtonGroup","orientation","color","aria-label","Button","onClick","Checkbox","checked","onChange","e","target","id","TextField","type","label","value","inputProps","min","max","InputLabelProps","shrink","NavigationBar","Toolbar","MenuItem","to","process","StatisticsChart","ChartArea","data","ResponsiveContainer","width","height","AreaChart","margin","left","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","stroke","fill","ChartBars","BarChart","right","Bar","requestCountriesList","query","fetch","then","res","responseData","json","SelectCountryList","useState","countriesList","setCountriesList","useEffect","sessionStorage","getItem","JSON","parse","listFromRequest","sortedCountriesList","sort","setItem","stringify","Select","defaultValue","disabled","map","country","Slug","handleSearchByCountry","casesType","dateFrom","dateForSearch","toLowerCase","quantitiesByDate","forEach","item","dateOfRecord","hasOwnProperty","Object","keys","quantity","extractDataFromResponse","setCountry","setCasesType","setDateFrom","setData","message","setMessage","previousCountryFilter","previousCasesTypeFilter","previousDateFromFilter","handleSearch","results","length","alert","countryKey","cases","transformTypeValueToKey","newCasesOnly","handleGlobalSearch","dateTo","dateSearchKey","casesTypeKey","Global","setDateTo","setNewCasesOnly","previousDateToFilter","previousNewCasesOnlyFilter","areNew","toString","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14c16000.chunk.js","sourcesContent":["import React from 'react';\nimport {Container, Typography} from \"@material-ui/core\";\n\nfunction About() {\n  return (\n    <Container>\n      <div className=\"spacing-top\">\n        <Typography className=\"center-text\">\n          This is a simple app that provides Covid19 statistics.\n          To search data choose the type of statistics on the top of the app\n          (global statistics or statistics per country), then choose your filters and press search button.\n        </Typography><br /><br />\n        <Typography className=\"center-text\">\n          The app uses free public API <a href=\"https://covid19api.com/\">https://covid19api.com/</a>.\n        </Typography><br /><br />\n        <Typography className=\"center-text\">\n          © Anton Liannoi, 2021\n        </Typography>\n      </div>\n    </Container>\n  )\n}\n\nexport default About;\n","const MIN_DATE = '2019-12-01';\n\nconst API_URL = 'https://api.covid19api.com';\n\nconst CONFIRMED = 'Confirmed';\nconst DEATHS = 'Deaths';\nconst RECOVERED = 'Recovered';\nconst ACTIVE = 'Active';\n\nconst LOADING = 'Loading...';\nconst NO_DATA_FOUND = 'No data found for your search parameters';\nconst ERROR = 'An error occurred while processing your request';\nconst CHOOSE_SEARCH_PARAMETERS = 'Choose your search parameters and press \"SEARCH\" button';\n\nexport {\n  MIN_DATE,\n  API_URL,\n  CONFIRMED,\n  DEATHS,\n  RECOVERED,\n  LOADING,\n  NO_DATA_FOUND,\n  ERROR,\n  ACTIVE,\n  CHOOSE_SEARCH_PARAMETERS\n};\n","function getCurrentDate() {\n  return new Date().toISOString().split('T')[0];\n}\n\nfunction sortByDate(a: {date: string}, b: {date: string}) {\n    if (a.date < b.date) return -1;\n    else if (a.date > b.date) return 1;\n    else return 0;\n}\n\nfunction sortByCountryName(a: {Country: string}, b: {Country: string}) {\n  if (a.Country < b.Country) return -1;\n  else if (a.Country > b.Country) return 1;\n  else return 0;\n}\n\nexport {getCurrentDate, sortByDate, sortByCountryName};\n","import React from 'react';\nimport {MIN_DATE, CONFIRMED, DEATHS, RECOVERED, ACTIVE} from '../constants';\nimport {getCurrentDate} from '../methods';\nimport {SelectCountryList} from '../components';\n\nimport {Checkbox, ButtonGroup, Button, TextField, Typography} from \"@material-ui/core\";\n\nfunction Sidebar({\n                   searchByCountries,\n                   chooseCountry = () => null,\n                   chooseCasesType,\n                   chooseDateFrom,\n                   chooseDateTo = () => null,\n                   chooseNewCasesOnly = () => null,\n                   chosenCases,\n                   chosenNewCasesOnly,\n                   onSearchButtonClick,\n                   chosenDateFrom,\n                   chosenDateTo,\n                 }: {\n  searchByCountries?: boolean,\n  chooseCountry?: (country: string) => void,\n  chooseCasesType: (cases: string) => () => void,\n  chooseDateFrom: (date: string) => void,\n  chooseDateTo?: (date: string) => void,\n  chooseNewCasesOnly?: (areNew: boolean) => void,\n  chosenCases: string,\n  chosenNewCasesOnly?: boolean,\n  onSearchButtonClick: () => void,\n  chosenDateFrom?: string,\n  chosenDateTo?: string,\n}) {\n  const handleChangeDateFrom = (e: React.ChangeEvent<HTMLInputElement>) => {\n    chooseDateFrom(e.target.value);\n  }\n\n  const handleChangeDateTo = (e: React.ChangeEvent<HTMLInputElement>) => {\n    chooseDateTo(e.target.value);\n  }\n\n  const handleNewCasesClick = (e: React.ChangeEvent<HTMLInputElement>) => {\n    chooseNewCasesOnly(e.target.checked);\n  }\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar-item-container\">\n        <Typography variant=\"h6\" className=\"center-text\">\n          {searchByCountries ? 'Statistics Per Country' : 'Global Statistics'}\n        </Typography>\n      </div>\n      {searchByCountries && (\n        <div className=\"sidebar-item-container\">\n          <SelectCountryList chooseCountry={chooseCountry}/>\n        </div>\n      )}\n      <div className=\"sidebar-item-container\">\n        <ButtonGroup\n          orientation=\"vertical\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\">\n          <Button\n            variant={chosenCases === CONFIRMED ? 'contained' : 'outlined'}\n            onClick={chooseCasesType(CONFIRMED)}>\n            Confirmed\n          </Button>\n          <Button\n            variant={chosenCases === DEATHS ? 'contained' : 'outlined'}\n            onClick={chooseCasesType(DEATHS)}>\n            Deaths\n          </Button>\n          <Button\n            variant={chosenCases === RECOVERED ? 'contained' : 'outlined'}\n            onClick={chooseCasesType(RECOVERED)}>\n            Recovered\n          </Button>\n          {searchByCountries && (\n            <Button\n              variant={chosenCases === ACTIVE ? 'contained' : 'outlined'}\n              onClick={chooseCasesType(ACTIVE)}>\n              Active\n            </Button>\n          )}\n        </ButtonGroup>\n      </div>\n      {searchByCountries || (\n        <div className=\"sidebar-item-container\">\n          <div className=\"flex-row\">\n            <Checkbox checked={chosenNewCasesOnly} color=\"primary\" onChange={handleNewCasesClick}/>\n            <Typography>New cases per day</Typography>\n          </div>\n        </div>\n      )}\n      <div id=\"period\">\n        <div className=\"sidebar-item-container\">\n          <TextField\n            type=\"date\"\n            label=\"Choose Date From\"\n            value={chosenDateFrom || ''}\n            inputProps={{\n              min: MIN_DATE,\n              max: chosenDateTo || getCurrentDate(),\n            }}\n            InputLabelProps={{shrink: true}}\n            onChange={handleChangeDateFrom}\n          />\n        </div>\n        {searchByCountries ||\n        <div className=\"sidebar-item-container\">\n          <TextField\n            type=\"date\"\n            label=\"Choose Date To\"\n            value={chosenDateTo}\n            inputProps={{\n              min: chosenDateFrom || MIN_DATE,\n              max: getCurrentDate(),\n            }}\n            InputLabelProps={{shrink: true}}\n            onChange={handleChangeDateTo}\n          />\n        </div>}\n      </div>\n      <Button variant=\"contained\" color=\"primary\" onClick={onSearchButtonClick}>Search</Button>\n    </div>\n  )\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Typography, Toolbar, MenuItem} from \"@material-ui/core\";\n\nfunction NavigationBar() {\n  return (\n    <Toolbar>\n      <div className=\"flex-adapt\">\n        <Typography className=\"title\" variant=\"h6\">Covid19 Statistics</Typography>\n        <div className=\"nav-links flex-adapt\">\n          <MenuItem>\n            <Link className=\"link\" to={process.env.PUBLIC_URL + '/'}>Global statistics</Link>\n          </MenuItem>\n          <MenuItem>\n            <Link className=\"link\" to={process.env.PUBLIC_URL + '/country'}>Statistics per country</Link>\n          </MenuItem>\n          <MenuItem>\n            <Link className=\"link\" to={process.env.PUBLIC_URL + '/about'}>About</Link>\n          </MenuItem>\n        </div>\n      </div>\n    </Toolbar>\n  )\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport {\n  AreaChart,\n  BarChart,\n  Bar,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\nfunction ChartArea({data}: { data: { date: string, quantity: string }[] }) {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <AreaChart\n        data={data}\n        margin={{\n          left: 60,\n        }}\n        width={1000}\n        height={500}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\"/>\n        <XAxis dataKey=\"date\"/>\n        <YAxis/>\n        <Tooltip/>\n        <Area type=\"monotone\" dataKey=\"quantity\" stroke=\"#717ec7\" fill=\"#b8c2ff\"/>\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nfunction ChartBars({data}: { data: { date: string, quantity: string }[] }) {\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          left: 40,\n          right: 30,\n        }}\n        width={1000}\n        height={500}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\"/>\n        <XAxis dataKey=\"date\"/>\n        <YAxis/>\n        <Tooltip/>\n        <Bar dataKey=\"quantity\" fill=\"#8884d8\"/>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\nconst StatisticsChart = {ChartArea, ChartBars};\n\nexport default StatisticsChart;\n","import {API_URL} from \"../constants\";\n\nfunction requestCountriesList() {\n  const query = `${API_URL}/countries`;\n\n  return fetch(query)\n    .then(res => res)\n    .then(responseData => responseData.json(), () => null)\n}\n\nexport default requestCountriesList;\n","import React, {useEffect, useState} from 'react';\nimport requestCountriesList from \"../requests/requestCountriesList\";\nimport {sortByCountryName} from \"../methods\";\n\nimport {Select, MenuItem} from \"@material-ui/core\";\n\nfunction SelectCountryList({chooseCountry}: { chooseCountry: (country: string) => void }) {\n  const [countriesList, setCountriesList] = useState([]);\n\n  useEffect(() => {\n      if (sessionStorage.getItem('countriesList')) {\n        setCountriesList(JSON.parse(sessionStorage.getItem('countriesList') || ''));\n      } else {\n        requestCountriesList().then((listFromRequest) => {\n            if (listFromRequest) {\n              const sortedCountriesList = listFromRequest.sort(sortByCountryName);\n              sessionStorage.setItem('countriesList', JSON.stringify(sortedCountriesList));\n              setCountriesList(sortedCountriesList);\n            }\n          }\n        );\n      }\n    }, []\n  );\n\n  const handleCountrySelect = (e: React.ChangeEvent<{ value: unknown; }>) => {\n    chooseCountry(e.target.value as string);\n  }\n\n  return (\n    <Select defaultValue={sessionStorage.getItem('countryCountryFilter') || 'default'} onChange={handleCountrySelect}>\n      <MenuItem value=\"default\" disabled>Choose country...</MenuItem>\n      {countriesList.map((country: { Country: string, Slug: string }) => (\n        <MenuItem key={country.Slug} value={country.Slug}>{country.Country}</MenuItem>\n      ))}\n    </Select>\n  );\n}\n\nexport default SelectCountryList;\n","import {MIN_DATE, API_URL} from '../constants';\nimport {sortByDate} from '../methods';\n\nfunction handleSearchByCountry(country: string, casesType: string, dateFrom: string) {\n  // API does not allow searching without date value\n  const dateForSearch = dateFrom || MIN_DATE;\n\n  const query = `${API_URL}/live/country/${country}/status/${casesType.toLowerCase()}/date/${dateForSearch}`;\n\n  return fetch(query)\n    .then(res => res.json())\n    .then(responseData => extractDataFromResponse(casesType, responseData), () => null);\n}\n\nfunction extractDataFromResponse(casesType: string, responseData: any[]) {\n  if (responseData) {\n    // calculating total country data as a sum of its regions data\n    const quantitiesByDate: { [key: string]: number } = {};\n\n    responseData.forEach((item) => {\n      const dateOfRecord = item.Date?.split('T')[0];\n\n      if (quantitiesByDate.hasOwnProperty(dateOfRecord)) {\n        quantitiesByDate[dateOfRecord] += item[casesType];\n      } else {\n        quantitiesByDate[dateOfRecord] = item[casesType];\n      }\n    });\n\n    return Object.keys(quantitiesByDate).map((date) => {\n      return {\n        date: date,\n        quantity: quantitiesByDate[date],\n      }\n    }).sort(sortByDate)\n  } else return [];\n}\n\nexport default handleSearchByCountry;\n","import React, {useEffect, useState} from 'react';\nimport {Sidebar, StatisticsChart} from '../components';\nimport handleSearchByCountry from '../requests/handleSearchByCountry'\nimport {CONFIRMED, ERROR, LOADING, NO_DATA_FOUND, CHOOSE_SEARCH_PARAMETERS} from '../constants';\nimport {Container, Typography} from \"@material-ui/core\";\n\nfunction Country() {\n  const [country, setCountry] = useState('');\n  const [casesType, setCasesType] = useState(CONFIRMED);\n  const [dateFrom, setDateFrom] = useState('');\n\n  const [data, setData] = useState<any[]>([]);\n  const [message, setMessage] = useState(CHOOSE_SEARCH_PARAMETERS);\n\n  useEffect(() => {\n      const previousCountryFilter = sessionStorage.getItem('countryCountryFilter');\n      previousCountryFilter && setCountry(previousCountryFilter);\n\n      const previousCasesTypeFilter = sessionStorage.getItem('countryCasesTypeFilter');\n      previousCasesTypeFilter && setCasesType(previousCasesTypeFilter);\n\n      const previousDateFromFilter = sessionStorage.getItem('countryDateFromFilter');\n      previousDateFromFilter && setDateFrom(previousDateFromFilter);\n    }, []\n  );\n\n  const handleChooseCountry = (countryKey: string) => {\n    setCountry(countryKey);\n    sessionStorage.setItem('countryCountryFilter', countryKey);\n  }\n\n  const handleChooseCasesType = (cases: string) => () => {\n    setCasesType(cases);\n    sessionStorage.setItem('countryCasesTypeFilter', cases);\n  }\n\n  const handleChooseDateFrom = (date: string) => {\n    setDateFrom(date);\n    sessionStorage.setItem('countryDateFromFilter', date);\n  }\n\n  const handleSearch = async () => {\n    if (country) {\n      setMessage(LOADING);\n      const results = await handleSearchByCountry(country, casesType, dateFrom);\n      if (results) {\n        if (results.length) {\n          setData(results);\n          setMessage('');\n        } else {\n          setMessage(NO_DATA_FOUND);\n        }\n      } else setMessage(ERROR);\n    } else alert('Please, choose a country from the list')\n  }\n\n  return (\n    <div className=\"flex-adapt\">\n      <Sidebar\n        searchByCountries\n        chooseCountry={handleChooseCountry}\n        chooseCasesType={handleChooseCasesType}\n        chooseDateFrom={handleChooseDateFrom}\n        chosenCases={casesType}\n        chosenDateFrom={dateFrom}\n        onSearchButtonClick={handleSearch}\n      />\n      {\n        message ?\n          <Container>\n            <Typography className=\"center-text\">{message}</Typography>\n          </Container> :\n          <div className=\"max-fit\">\n            <StatisticsChart.ChartBars data={data}/>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Country;\n","import {API_URL} from '../constants';\nimport {sortByDate} from '../methods';\n\nfunction handleGlobalSearch(casesType: string, dateFrom: string, dateTo: string, newCasesOnly: boolean) {\n  // API does not allow searching with only one date value\n  const dateSearchKey = (dateFrom || dateTo) && `from=${dateFrom}&to=${dateTo}`;\n\n  const query = `${API_URL}/world?${dateSearchKey}`\n\n  return fetch(query)\n    .then(res => res.json())\n    .then(responseData => extractDataFromResponse(casesType, responseData, newCasesOnly), () => null);\n}\n\nfunction extractDataFromResponse(casesType: string, responseData: any[], newCasesOnly: boolean) {\n  if (responseData) {\n    const casesTypeKey = transformTypeValueToKey(casesType, newCasesOnly);\n    return responseData.map((item) => {\n      return {\n        date: item.Date?.split('T')[0],\n        quantity: item[casesTypeKey],\n      }\n    }).sort(sortByDate);\n  } else return [];\n}\n\nconst transformTypeValueToKey = (casesType: string, newCasesOnly: boolean) => {\n  return (newCasesOnly ? 'New' : 'Total') + casesType;\n}\n\nexport default handleGlobalSearch;\n","import React, {useEffect, useState} from 'react';\nimport {Sidebar, StatisticsChart} from '../components';\nimport handleGlobalSearch from '../requests/handleGlobalSearch';\nimport {CONFIRMED, ERROR, LOADING, MIN_DATE, NO_DATA_FOUND, CHOOSE_SEARCH_PARAMETERS} from '../constants';\nimport {getCurrentDate} from \"../methods\";\nimport {Typography, Container} from \"@material-ui/core\";\n\nfunction Global() {\n  const [casesType, setCasesType] = useState(CONFIRMED);\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [newCasesOnly, setNewCasesOnly] = useState(false);\n\n  const [data, setData] = useState<any[]>([]);\n  const [message, setMessage] = useState(CHOOSE_SEARCH_PARAMETERS);\n\n  useEffect(() => {\n      const previousCasesTypeFilter = sessionStorage.getItem('globalCasesTypeFilter');\n      previousCasesTypeFilter && setCasesType(previousCasesTypeFilter);\n\n      const previousDateFromFilter = sessionStorage.getItem('globalDateFromFilter');\n      previousDateFromFilter && setDateFrom(previousDateFromFilter);\n\n      const previousDateToFilter = sessionStorage.getItem('globalDateToFilter');\n      previousDateToFilter && setDateTo(previousDateToFilter);\n\n      const previousNewCasesOnlyFilter = sessionStorage.getItem('globalNewCasesOnlyFilter');\n      previousNewCasesOnlyFilter && setNewCasesOnly(previousNewCasesOnlyFilter === 'true');\n    }, []\n  );\n\n  useEffect(() => {\n    if (dateFrom || dateTo) {\n      sessionStorage.setItem('globalDateFromFilter', dateFrom);\n      sessionStorage.setItem('globalDateToFilter', dateTo);\n    }\n  }, [dateFrom, dateTo])\n\n  const handleChooseCasesType = (cases: string) => () => {\n    setCasesType(cases);\n    sessionStorage.setItem('globalCasesTypeFilter', cases);\n  }\n\n  const handleChooseDateFrom = (date: string) => {\n    setDateFrom(date);\n    // since API does not allow searching with only one date value:\n    !dateTo && setDateTo(getCurrentDate());\n  }\n\n  const handleChooseDateTo = (date: string) => {\n    setDateTo(date);\n    // since API does not allow searching with only one date value:\n    !dateFrom && setDateFrom(MIN_DATE);\n  }\n\n  const handleChooseNewCasesOnly = (areNew: boolean) => {\n    setNewCasesOnly(areNew);\n    sessionStorage.setItem('globalNewCasesOnlyFilter', areNew.toString());\n  }\n\n  const handleSearch = async () => {\n    if (dateFrom && dateTo && dateFrom >= dateTo) {\n      alert('Please, set \"Date From\" lower than \"Date To\"');\n    } else {\n      setMessage(LOADING);\n      const results = await handleGlobalSearch(casesType, dateFrom, dateTo, newCasesOnly);\n      if (results) {\n        if (results.length) {\n          setData(results);\n          setMessage('');\n        } else {\n          setMessage(NO_DATA_FOUND);\n        }\n      } else setMessage(ERROR);\n    }\n  }\n\n  return (\n    <div className=\"flex-adapt\">\n      <Sidebar\n        chooseCasesType={handleChooseCasesType}\n        chooseDateFrom={handleChooseDateFrom}\n        chooseDateTo={handleChooseDateTo}\n        chooseNewCasesOnly={handleChooseNewCasesOnly}\n        chosenCases={casesType}\n        chosenNewCasesOnly={newCasesOnly}\n        onSearchButtonClick={handleSearch}\n        chosenDateFrom={dateFrom}\n        chosenDateTo={dateTo}\n      />\n      {\n        message ?\n          <Container>\n            <Typography className=\"center-text\">{message}</Typography>\n          </Container> :\n          <div className=\"max-fit\">\n            <StatisticsChart.ChartArea data={data}/>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Global;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\n\nimport {Global, Country, About} from './pages';\nimport {NavigationBar} from \"./components\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavigationBar />\n      <Switch>\n        <Route path={process.env.PUBLIC_URL + '/country'}>\n          <Country/>\n        </Route>\n        <Route path={process.env.PUBLIC_URL + '/about'}>\n          <About/>\n        </Route>\n        <Route path={process.env.PUBLIC_URL + '/'}>\n          <Global/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}